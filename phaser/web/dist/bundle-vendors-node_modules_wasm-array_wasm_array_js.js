"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkphaser_frontend"] = self["webpackChunkphaser_frontend"] || []).push([["vendors-node_modules_wasm-array_wasm_array_js"],{

/***/ "./node_modules/wasm-array/wasm_array.js":
/*!***********************************************!*\
  !*** ./node_modules/wasm-array/wasm_array.js ***!
  \***********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataType: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.DataType),\n/* harmony export */   NArray: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.NArray),\n/* harmony export */   Slice: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.Slice),\n/* harmony export */   __wbg_BigInt_42b692c18e1ac6d6: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_BigInt_42b692c18e1ac6d6),\n/* harmony export */   __wbg_String_b9412f8799faab3e: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_String_b9412f8799faab3e),\n/* harmony export */   __wbg_apply_0a5aa603881e6d79: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_apply_0a5aa603881e6d79),\n/* harmony export */   __wbg_buffer_12d079cc21e14bdb: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_buffer_12d079cc21e14bdb),\n/* harmony export */   __wbg_call_27c0f87801dedf93: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_call_27c0f87801dedf93),\n/* harmony export */   __wbg_done_298b57d23c0fc80c: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_done_298b57d23c0fc80c),\n/* harmony export */   __wbg_error_f851667af71bcfc6: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_error_f851667af71bcfc6),\n/* harmony export */   __wbg_fromEntries_c9d8ec8925e677a8: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_fromEntries_c9d8ec8925e677a8),\n/* harmony export */   __wbg_get_bd8e338fbd5f5cc8: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_get_bd8e338fbd5f5cc8),\n/* harmony export */   __wbg_get_e3c254076557e348: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_get_e3c254076557e348),\n/* harmony export */   __wbg_getwithrefkey_edc2c8960f0f1191: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_getwithrefkey_edc2c8960f0f1191),\n/* harmony export */   __wbg_instanceof_ArrayBuffer_836825be07d4c9d2: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_instanceof_ArrayBuffer_836825be07d4c9d2),\n/* harmony export */   __wbg_instanceof_Uint8Array_2b3bbecd033d19f6: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_instanceof_Uint8Array_2b3bbecd033d19f6),\n/* harmony export */   __wbg_isArray_2ab64d95e09ea0ae: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_isArray_2ab64d95e09ea0ae),\n/* harmony export */   __wbg_isSafeInteger_f7b04ef02296c4d2: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_isSafeInteger_f7b04ef02296c4d2),\n/* harmony export */   __wbg_iterator_2cee6dadfd956dfa: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_iterator_2cee6dadfd956dfa),\n/* harmony export */   __wbg_length_c20a40f15020d68a: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_length_c20a40f15020d68a),\n/* harmony export */   __wbg_length_cd7af8117672b8b8: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_length_cd7af8117672b8b8),\n/* harmony export */   __wbg_narray_new: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_narray_new),\n/* harmony export */   __wbg_new_16b304a2cfa7ff4a: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_new_16b304a2cfa7ff4a),\n/* harmony export */   __wbg_new_63b92bc8671ed464: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_new_63b92bc8671ed464),\n/* harmony export */   __wbg_new_72fb9a18b5ae2624: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_new_72fb9a18b5ae2624),\n/* harmony export */   __wbg_new_abda76e883ba8a5f: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_new_abda76e883ba8a5f),\n/* harmony export */   __wbg_new_d9bc3a0147634640: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_new_d9bc3a0147634640),\n/* harmony export */   __wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb),\n/* harmony export */   __wbg_next_196c84450b364254: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_next_196c84450b364254),\n/* harmony export */   __wbg_next_40fc327bfc8770e6: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_next_40fc327bfc8770e6),\n/* harmony export */   __wbg_push_a5b05aedc7234f9f: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_push_a5b05aedc7234f9f),\n/* harmony export */   __wbg_set_8417257aaedc936b: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_set_8417257aaedc936b),\n/* harmony export */   __wbg_set_a47bac70306a19a7: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_set_a47bac70306a19a7),\n/* harmony export */   __wbg_set_d4638f722068f043: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_set_d4638f722068f043),\n/* harmony export */   __wbg_set_f975102236d3c502: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_set_f975102236d3c502),\n/* harmony export */   __wbg_set_wasm: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_set_wasm),\n/* harmony export */   __wbg_stack_658279fe44541cf6: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_stack_658279fe44541cf6),\n/* harmony export */   __wbg_toString_0b527fce0e8f2bab: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_toString_0b527fce0e8f2bab),\n/* harmony export */   __wbg_value_d93c65011f51a456: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_value_d93c65011f51a456),\n/* harmony export */   __wbindgen_as_number: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_as_number),\n/* harmony export */   __wbindgen_bigint_from_i64: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_bigint_from_i64),\n/* harmony export */   __wbindgen_bigint_from_u64: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_bigint_from_u64),\n/* harmony export */   __wbindgen_bigint_get_as_i64: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_bigint_get_as_i64),\n/* harmony export */   __wbindgen_boolean_get: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_boolean_get),\n/* harmony export */   __wbindgen_debug_string: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_debug_string),\n/* harmony export */   __wbindgen_error_new: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_error_new),\n/* harmony export */   __wbindgen_ge: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_ge),\n/* harmony export */   __wbindgen_in: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_in),\n/* harmony export */   __wbindgen_is_bigint: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_is_bigint),\n/* harmony export */   __wbindgen_is_function: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_is_function),\n/* harmony export */   __wbindgen_is_null: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_is_null),\n/* harmony export */   __wbindgen_is_object: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_is_object),\n/* harmony export */   __wbindgen_is_undefined: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_is_undefined),\n/* harmony export */   __wbindgen_jsval_eq: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_jsval_eq),\n/* harmony export */   __wbindgen_jsval_loose_eq: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_jsval_loose_eq),\n/* harmony export */   __wbindgen_memory: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_memory),\n/* harmony export */   __wbindgen_number_get: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_number_get),\n/* harmony export */   __wbindgen_number_new: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_number_new),\n/* harmony export */   __wbindgen_object_clone_ref: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_object_clone_ref),\n/* harmony export */   __wbindgen_object_drop_ref: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_object_drop_ref),\n/* harmony export */   __wbindgen_string_get: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_string_get),\n/* harmony export */   __wbindgen_string_new: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_string_new),\n/* harmony export */   __wbindgen_throw: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_throw),\n/* harmony export */   __wbindgen_typeof: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_typeof),\n/* harmony export */   abs: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.abs),\n/* harmony export */   abs2: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.abs2),\n/* harmony export */   allclose: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.allclose),\n/* harmony export */   allequal: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.allequal),\n/* harmony export */   angle: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.angle),\n/* harmony export */   arange: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.arange),\n/* harmony export */   arccos: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.arccos),\n/* harmony export */   arcsin: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.arcsin),\n/* harmony export */   arctan: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.arctan),\n/* harmony export */   arctan2: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.arctan2),\n/* harmony export */   array: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.array),\n/* harmony export */   broadcast_arrays: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.broadcast_arrays),\n/* harmony export */   broadcast_shapes: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.broadcast_shapes),\n/* harmony export */   broadcast_to: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.broadcast_to),\n/* harmony export */   ceil: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.ceil),\n/* harmony export */   conj: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.conj),\n/* harmony export */   cos_: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.cos_),\n/* harmony export */   exp_: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.exp_),\n/* harmony export */   expr: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.expr),\n/* harmony export */   eye: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.eye),\n/* harmony export */   fft: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.fft),\n/* harmony export */   fft2: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.fft2),\n/* harmony export */   fft2shift: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.fft2shift),\n/* harmony export */   fftshift: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.fftshift),\n/* harmony export */   floor: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.floor),\n/* harmony export */   from_interchange: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.from_interchange),\n/* harmony export */   geomspace: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.geomspace),\n/* harmony export */   ifft: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.ifft),\n/* harmony export */   ifft2: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.ifft2),\n/* harmony export */   ifft2shift: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.ifft2shift),\n/* harmony export */   ifftshift: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.ifftshift),\n/* harmony export */   indices: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.indices),\n/* harmony export */   inf: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.inf),\n/* harmony export */   interp: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.interp),\n/* harmony export */   interpn: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.interpn),\n/* harmony export */   linspace: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.linspace),\n/* harmony export */   log10_: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.log10_),\n/* harmony export */   log2_: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.log2_),\n/* harmony export */   log_: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.log_),\n/* harmony export */   logspace: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.logspace),\n/* harmony export */   main: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.main),\n/* harmony export */   max: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.max),\n/* harmony export */   maximum: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.maximum),\n/* harmony export */   mean: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.mean),\n/* harmony export */   meshgrid: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.meshgrid),\n/* harmony export */   min: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.min),\n/* harmony export */   minimum: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.minimum),\n/* harmony export */   nan: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.nan),\n/* harmony export */   nanmax: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.nanmax),\n/* harmony export */   nanmaximum: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.nanmaximum),\n/* harmony export */   nanmean: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.nanmean),\n/* harmony export */   nanmin: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.nanmin),\n/* harmony export */   nanminimum: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.nanminimum),\n/* harmony export */   nanprod: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.nanprod),\n/* harmony export */   nansum: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.nansum),\n/* harmony export */   ones: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.ones),\n/* harmony export */   pi: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.pi),\n/* harmony export */   prod: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.prod),\n/* harmony export */   ravel: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.ravel),\n/* harmony export */   reshape: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.reshape),\n/* harmony export */   roll: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.roll),\n/* harmony export */   sin_: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.sin_),\n/* harmony export */   split: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.split),\n/* harmony export */   sqrt: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.sqrt),\n/* harmony export */   stack: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.stack),\n/* harmony export */   sum: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.sum),\n/* harmony export */   tan_: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.tan_),\n/* harmony export */   tau: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.tau),\n/* harmony export */   to_dtype: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.to_dtype),\n/* harmony export */   zeros: () => (/* reexport safe */ _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.zeros)\n/* harmony export */ });\n/* harmony import */ var _wasm_array_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wasm_array_bg.wasm */ \"./node_modules/wasm-array/wasm_array_bg.wasm\");\n/* harmony import */ var _wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wasm_array_bg.js */ \"./node_modules/wasm-array/wasm_array_bg.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_wasm_array_bg_wasm__WEBPACK_IMPORTED_MODULE_0__]);\n_wasm_array_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n(0,_wasm_array_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_set_wasm)(_wasm_array_bg_wasm__WEBPACK_IMPORTED_MODULE_0__);\n\n\n_wasm_array_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_start();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2FzbS1hcnJheS93YXNtX2FycmF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQzZDO0FBQ087QUFDcEQsaUVBQWMsQ0FBQyxnREFBSTtBQUNnQjs7QUFFbkMsaUVBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGhhc2VyLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3dhc20tYXJyYXkvd2FzbV9hcnJheS5qcz9jMzIyIl0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0ICogYXMgd2FzbSBmcm9tIFwiLi93YXNtX2FycmF5X2JnLndhc21cIjtcbmltcG9ydCB7IF9fd2JnX3NldF93YXNtIH0gZnJvbSBcIi4vd2FzbV9hcnJheV9iZy5qc1wiO1xuX193Ymdfc2V0X3dhc20od2FzbSk7XG5leHBvcnQgKiBmcm9tIFwiLi93YXNtX2FycmF5X2JnLmpzXCI7XG5cbndhc20uX193YmluZGdlbl9zdGFydCgpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/wasm-array/wasm_array.js\n\n}");

/***/ }),

/***/ "./node_modules/wasm-array/wasm_array_bg.js":
/*!**************************************************!*\
  !*** ./node_modules/wasm-array/wasm_array_bg.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataType: () => (/* binding */ DataType),\n/* harmony export */   NArray: () => (/* binding */ NArray),\n/* harmony export */   Slice: () => (/* binding */ Slice),\n/* harmony export */   __wbg_BigInt_42b692c18e1ac6d6: () => (/* binding */ __wbg_BigInt_42b692c18e1ac6d6),\n/* harmony export */   __wbg_String_b9412f8799faab3e: () => (/* binding */ __wbg_String_b9412f8799faab3e),\n/* harmony export */   __wbg_apply_0a5aa603881e6d79: () => (/* binding */ __wbg_apply_0a5aa603881e6d79),\n/* harmony export */   __wbg_buffer_12d079cc21e14bdb: () => (/* binding */ __wbg_buffer_12d079cc21e14bdb),\n/* harmony export */   __wbg_call_27c0f87801dedf93: () => (/* binding */ __wbg_call_27c0f87801dedf93),\n/* harmony export */   __wbg_done_298b57d23c0fc80c: () => (/* binding */ __wbg_done_298b57d23c0fc80c),\n/* harmony export */   __wbg_error_f851667af71bcfc6: () => (/* binding */ __wbg_error_f851667af71bcfc6),\n/* harmony export */   __wbg_fromEntries_c9d8ec8925e677a8: () => (/* binding */ __wbg_fromEntries_c9d8ec8925e677a8),\n/* harmony export */   __wbg_get_bd8e338fbd5f5cc8: () => (/* binding */ __wbg_get_bd8e338fbd5f5cc8),\n/* harmony export */   __wbg_get_e3c254076557e348: () => (/* binding */ __wbg_get_e3c254076557e348),\n/* harmony export */   __wbg_getwithrefkey_edc2c8960f0f1191: () => (/* binding */ __wbg_getwithrefkey_edc2c8960f0f1191),\n/* harmony export */   __wbg_instanceof_ArrayBuffer_836825be07d4c9d2: () => (/* binding */ __wbg_instanceof_ArrayBuffer_836825be07d4c9d2),\n/* harmony export */   __wbg_instanceof_Uint8Array_2b3bbecd033d19f6: () => (/* binding */ __wbg_instanceof_Uint8Array_2b3bbecd033d19f6),\n/* harmony export */   __wbg_isArray_2ab64d95e09ea0ae: () => (/* binding */ __wbg_isArray_2ab64d95e09ea0ae),\n/* harmony export */   __wbg_isSafeInteger_f7b04ef02296c4d2: () => (/* binding */ __wbg_isSafeInteger_f7b04ef02296c4d2),\n/* harmony export */   __wbg_iterator_2cee6dadfd956dfa: () => (/* binding */ __wbg_iterator_2cee6dadfd956dfa),\n/* harmony export */   __wbg_length_c20a40f15020d68a: () => (/* binding */ __wbg_length_c20a40f15020d68a),\n/* harmony export */   __wbg_length_cd7af8117672b8b8: () => (/* binding */ __wbg_length_cd7af8117672b8b8),\n/* harmony export */   __wbg_narray_new: () => (/* binding */ __wbg_narray_new),\n/* harmony export */   __wbg_new_16b304a2cfa7ff4a: () => (/* binding */ __wbg_new_16b304a2cfa7ff4a),\n/* harmony export */   __wbg_new_63b92bc8671ed464: () => (/* binding */ __wbg_new_63b92bc8671ed464),\n/* harmony export */   __wbg_new_72fb9a18b5ae2624: () => (/* binding */ __wbg_new_72fb9a18b5ae2624),\n/* harmony export */   __wbg_new_abda76e883ba8a5f: () => (/* binding */ __wbg_new_abda76e883ba8a5f),\n/* harmony export */   __wbg_new_d9bc3a0147634640: () => (/* binding */ __wbg_new_d9bc3a0147634640),\n/* harmony export */   __wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb: () => (/* binding */ __wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb),\n/* harmony export */   __wbg_next_196c84450b364254: () => (/* binding */ __wbg_next_196c84450b364254),\n/* harmony export */   __wbg_next_40fc327bfc8770e6: () => (/* binding */ __wbg_next_40fc327bfc8770e6),\n/* harmony export */   __wbg_push_a5b05aedc7234f9f: () => (/* binding */ __wbg_push_a5b05aedc7234f9f),\n/* harmony export */   __wbg_set_8417257aaedc936b: () => (/* binding */ __wbg_set_8417257aaedc936b),\n/* harmony export */   __wbg_set_a47bac70306a19a7: () => (/* binding */ __wbg_set_a47bac70306a19a7),\n/* harmony export */   __wbg_set_d4638f722068f043: () => (/* binding */ __wbg_set_d4638f722068f043),\n/* harmony export */   __wbg_set_f975102236d3c502: () => (/* binding */ __wbg_set_f975102236d3c502),\n/* harmony export */   __wbg_set_wasm: () => (/* binding */ __wbg_set_wasm),\n/* harmony export */   __wbg_stack_658279fe44541cf6: () => (/* binding */ __wbg_stack_658279fe44541cf6),\n/* harmony export */   __wbg_toString_0b527fce0e8f2bab: () => (/* binding */ __wbg_toString_0b527fce0e8f2bab),\n/* harmony export */   __wbg_value_d93c65011f51a456: () => (/* binding */ __wbg_value_d93c65011f51a456),\n/* harmony export */   __wbindgen_as_number: () => (/* binding */ __wbindgen_as_number),\n/* harmony export */   __wbindgen_bigint_from_i64: () => (/* binding */ __wbindgen_bigint_from_i64),\n/* harmony export */   __wbindgen_bigint_from_u64: () => (/* binding */ __wbindgen_bigint_from_u64),\n/* harmony export */   __wbindgen_bigint_get_as_i64: () => (/* binding */ __wbindgen_bigint_get_as_i64),\n/* harmony export */   __wbindgen_boolean_get: () => (/* binding */ __wbindgen_boolean_get),\n/* harmony export */   __wbindgen_debug_string: () => (/* binding */ __wbindgen_debug_string),\n/* harmony export */   __wbindgen_error_new: () => (/* binding */ __wbindgen_error_new),\n/* harmony export */   __wbindgen_ge: () => (/* binding */ __wbindgen_ge),\n/* harmony export */   __wbindgen_in: () => (/* binding */ __wbindgen_in),\n/* harmony export */   __wbindgen_is_bigint: () => (/* binding */ __wbindgen_is_bigint),\n/* harmony export */   __wbindgen_is_function: () => (/* binding */ __wbindgen_is_function),\n/* harmony export */   __wbindgen_is_null: () => (/* binding */ __wbindgen_is_null),\n/* harmony export */   __wbindgen_is_object: () => (/* binding */ __wbindgen_is_object),\n/* harmony export */   __wbindgen_is_undefined: () => (/* binding */ __wbindgen_is_undefined),\n/* harmony export */   __wbindgen_jsval_eq: () => (/* binding */ __wbindgen_jsval_eq),\n/* harmony export */   __wbindgen_jsval_loose_eq: () => (/* binding */ __wbindgen_jsval_loose_eq),\n/* harmony export */   __wbindgen_memory: () => (/* binding */ __wbindgen_memory),\n/* harmony export */   __wbindgen_number_get: () => (/* binding */ __wbindgen_number_get),\n/* harmony export */   __wbindgen_number_new: () => (/* binding */ __wbindgen_number_new),\n/* harmony export */   __wbindgen_object_clone_ref: () => (/* binding */ __wbindgen_object_clone_ref),\n/* harmony export */   __wbindgen_object_drop_ref: () => (/* binding */ __wbindgen_object_drop_ref),\n/* harmony export */   __wbindgen_string_get: () => (/* binding */ __wbindgen_string_get),\n/* harmony export */   __wbindgen_string_new: () => (/* binding */ __wbindgen_string_new),\n/* harmony export */   __wbindgen_throw: () => (/* binding */ __wbindgen_throw),\n/* harmony export */   __wbindgen_typeof: () => (/* binding */ __wbindgen_typeof),\n/* harmony export */   abs: () => (/* binding */ abs),\n/* harmony export */   abs2: () => (/* binding */ abs2),\n/* harmony export */   allclose: () => (/* binding */ allclose),\n/* harmony export */   allequal: () => (/* binding */ allequal),\n/* harmony export */   angle: () => (/* binding */ angle),\n/* harmony export */   arange: () => (/* binding */ arange),\n/* harmony export */   arccos: () => (/* binding */ arccos),\n/* harmony export */   arcsin: () => (/* binding */ arcsin),\n/* harmony export */   arctan: () => (/* binding */ arctan),\n/* harmony export */   arctan2: () => (/* binding */ arctan2),\n/* harmony export */   array: () => (/* binding */ array),\n/* harmony export */   broadcast_arrays: () => (/* binding */ broadcast_arrays),\n/* harmony export */   broadcast_shapes: () => (/* binding */ broadcast_shapes),\n/* harmony export */   broadcast_to: () => (/* binding */ broadcast_to),\n/* harmony export */   ceil: () => (/* binding */ ceil),\n/* harmony export */   conj: () => (/* binding */ conj),\n/* harmony export */   cos_: () => (/* binding */ cos_),\n/* harmony export */   exp_: () => (/* binding */ exp_),\n/* harmony export */   expr: () => (/* binding */ expr),\n/* harmony export */   eye: () => (/* binding */ eye),\n/* harmony export */   fft: () => (/* binding */ fft),\n/* harmony export */   fft2: () => (/* binding */ fft2),\n/* harmony export */   fft2shift: () => (/* binding */ fft2shift),\n/* harmony export */   fftshift: () => (/* binding */ fftshift),\n/* harmony export */   floor: () => (/* binding */ floor),\n/* harmony export */   from_interchange: () => (/* binding */ from_interchange),\n/* harmony export */   geomspace: () => (/* binding */ geomspace),\n/* harmony export */   ifft: () => (/* binding */ ifft),\n/* harmony export */   ifft2: () => (/* binding */ ifft2),\n/* harmony export */   ifft2shift: () => (/* binding */ ifft2shift),\n/* harmony export */   ifftshift: () => (/* binding */ ifftshift),\n/* harmony export */   indices: () => (/* binding */ indices),\n/* harmony export */   inf: () => (/* binding */ inf),\n/* harmony export */   interp: () => (/* binding */ interp),\n/* harmony export */   interpn: () => (/* binding */ interpn),\n/* harmony export */   linspace: () => (/* binding */ linspace),\n/* harmony export */   log10_: () => (/* binding */ log10_),\n/* harmony export */   log2_: () => (/* binding */ log2_),\n/* harmony export */   log_: () => (/* binding */ log_),\n/* harmony export */   logspace: () => (/* binding */ logspace),\n/* harmony export */   main: () => (/* binding */ main),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   maximum: () => (/* binding */ maximum),\n/* harmony export */   mean: () => (/* binding */ mean),\n/* harmony export */   meshgrid: () => (/* binding */ meshgrid),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   minimum: () => (/* binding */ minimum),\n/* harmony export */   nan: () => (/* binding */ nan),\n/* harmony export */   nanmax: () => (/* binding */ nanmax),\n/* harmony export */   nanmaximum: () => (/* binding */ nanmaximum),\n/* harmony export */   nanmean: () => (/* binding */ nanmean),\n/* harmony export */   nanmin: () => (/* binding */ nanmin),\n/* harmony export */   nanminimum: () => (/* binding */ nanminimum),\n/* harmony export */   nanprod: () => (/* binding */ nanprod),\n/* harmony export */   nansum: () => (/* binding */ nansum),\n/* harmony export */   ones: () => (/* binding */ ones),\n/* harmony export */   pi: () => (/* binding */ pi),\n/* harmony export */   prod: () => (/* binding */ prod),\n/* harmony export */   ravel: () => (/* binding */ ravel),\n/* harmony export */   reshape: () => (/* binding */ reshape),\n/* harmony export */   roll: () => (/* binding */ roll),\n/* harmony export */   sin_: () => (/* binding */ sin_),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   sqrt: () => (/* binding */ sqrt),\n/* harmony export */   stack: () => (/* binding */ stack),\n/* harmony export */   sum: () => (/* binding */ sum),\n/* harmony export */   tan_: () => (/* binding */ tan_),\n/* harmony export */   tau: () => (/* binding */ tau),\n/* harmony export */   to_dtype: () => (/* binding */ to_dtype),\n/* harmony export */   zeros: () => (/* binding */ zeros)\n/* harmony export */ });\nlet wasm;\nfunction __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nlet cachedUint32ArrayMemory0 = null;\n\nfunction getUint32ArrayMemory0() {\n    if (cachedUint32ArrayMemory0 === null || cachedUint32ArrayMemory0.byteLength === 0) {\n        cachedUint32ArrayMemory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachedUint32ArrayMemory0;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint32ArrayMemory0().subarray(ptr / 4, ptr / 4 + len);\n}\n\nlet cachedUint8ClampedArrayMemory0 = null;\n\nfunction getUint8ClampedArrayMemory0() {\n    if (cachedUint8ClampedArrayMemory0 === null || cachedUint8ClampedArrayMemory0.byteLength === 0) {\n        cachedUint8ClampedArrayMemory0 = new Uint8ClampedArray(wasm.memory.buffer);\n    }\n    return cachedUint8ClampedArrayMemory0;\n}\n\nfunction getClampedArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ClampedArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nlet stack_pointer = 128;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n/**\n* Create a `DataType` object from a `DataTypeLike`.\n* @param {DataTypeLike} dtype\n* @returns {DataType}\n*/\nfunction to_dtype(dtype) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.to_dtype(retptr, addBorrowedObject(dtype));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return DataType.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {ArrayLike} arr\n* @param {DataTypeLike} dtype\n* @returns {NArray}\n*/\nfunction array(arr, dtype) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.array(retptr, addBorrowedObject(arr), addBorrowedObject(dtype));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return an array filled with ones, of shape `shape` and dtype `dtype`\n* @param {ShapeLike} shape\n* @param {DataTypeLike} dtype\n* @returns {NArray}\n*/\nfunction ones(shape, dtype) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.ones(retptr, addHeapObject(shape), addBorrowedObject(dtype));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return an array filled with zeros, of shape `shape` and dtype `dtype`\n* @param {ShapeLike} shape\n* @param {DataTypeLike} dtype\n* @returns {NArray}\n*/\nfunction zeros(shape, dtype) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.zeros(retptr, addHeapObject(shape), addBorrowedObject(dtype));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {number} start\n* @param {number | undefined} end\n* @param {DataTypeLike} dtype\n* @returns {NArray}\n*/\nfunction arange(start, end, dtype) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.arange(retptr, start, !isLikeNone(end), isLikeNone(end) ? 0 : end, addBorrowedObject(dtype));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getDataViewMemory0();\n    const result = [];\n    for (let i = ptr; i < ptr + 4 * len; i += 4) {\n        result.push(takeObject(mem.getUint32(i, true)));\n    }\n    return result;\n}\n/**\n* @param {ShapeLike} shape\n* @param {DataTypeLike} dtype\n* @param {boolean | undefined} [sparse]\n* @returns {(NArray)[]}\n*/\nfunction indices(shape, dtype, sparse) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.indices(retptr, addHeapObject(shape), addBorrowedObject(dtype), isLikeNone(sparse) ? 0xFFFFFF : sparse ? 1 : 0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 4, 4);\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {number} start\n* @param {number} end\n* @param {number} n\n* @param {DataTypeLike} dtype\n* @returns {NArray}\n*/\nfunction linspace(start, end, n, dtype) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.linspace(retptr, start, end, n, addBorrowedObject(dtype));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {number} start\n* @param {number} end\n* @param {number} n\n* @param {DataTypeLike} dtype\n* @param {number | undefined} [base]\n* @returns {NArray}\n*/\nfunction logspace(start, end, n, dtype, base) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.logspace(retptr, start, end, n, addBorrowedObject(dtype), !isLikeNone(base), isLikeNone(base) ? 0 : base);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {number} start\n* @param {number} end\n* @param {number} n\n* @param {DataTypeLike} dtype\n* @returns {NArray}\n*/\nfunction geomspace(start, end, n, dtype) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.geomspace(retptr, start, end, n, addBorrowedObject(dtype));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {number} ndim\n* @param {DataTypeLike} dtype\n* @returns {NArray}\n*/\nfunction eye(ndim, dtype) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.eye(retptr, ndim, addBorrowedObject(dtype));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Roll elements of the array by `shifts`, along axes `axes`.\n*\n* If `axes` is specified, `shifts` and `axes` must be the same length.\n* Otherwise, `shifts` must be the same length as the array's dimensionality.\n* @param {ArrayLike} arr\n* @param {AxesLike} shifts\n* @param {AxesLike | undefined} [axes]\n* @returns {NArray}\n*/\nfunction roll(arr, shifts, axes) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.roll(retptr, addBorrowedObject(arr), addHeapObject(shifts), isLikeNone(axes) ? 0 : addHeapObject(axes));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Reshape array into shape `shape`.\n*\n* Up to one axis can be specified as '-1', allowing it to be inferred from the length of the array.\n* @param {ArrayLike} arr\n* @param {AxesLike} shape\n* @returns {NArray}\n*/\nfunction reshape(arr, shape) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.reshape(retptr, addBorrowedObject(arr), addHeapObject(shape));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return a contiguous, flattened array.\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction ravel(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.ravel(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {...any} arrs\n* @returns {(NArray)[]}\n*/\nfunction meshgrid(...arrs) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.meshgrid(retptr, addBorrowedObject(arrs));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 4, 4);\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Stack arrays together along a new axis\n* @param {any} arrs\n* @param {number | undefined} [axis]\n* @returns {NArray}\n*/\nfunction stack(arrs, axis) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.stack(retptr, addBorrowedObject(arrs), !isLikeNone(axis), isLikeNone(axis) ? 0 : axis);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Split an array along a given axis. Defaults to the first axis\n* @param {ArrayLike} arr\n* @param {number | undefined} [axis]\n* @returns {(NArray)[]}\n*/\nfunction split(arr, axis) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.split(retptr, addBorrowedObject(arr), !isLikeNone(axis), isLikeNone(axis) ? 0 : axis);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 4, 4);\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Broadcast an array to the given shape\n* @param {ArrayLike} array\n* @param {ShapeLike} shape\n* @returns {NArray}\n*/\nfunction broadcast_to(array, shape) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.broadcast_to(retptr, addBorrowedObject(array), addHeapObject(shape));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Broadcast arrays together\n* @param {...any} arrs\n* @returns {(NArray)[]}\n*/\nfunction broadcast_arrays(...arrs) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.broadcast_arrays(retptr, addBorrowedObject(arrs));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 4, 4);\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Broadcast shapes together\n* @param {...any} arrs\n* @returns {Array<any>}\n*/\nfunction broadcast_shapes(...arrs) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.broadcast_shapes(retptr, addBorrowedObject(arrs));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the ceiling of the input, element-wise\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction ceil(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.ceil(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the floor of the input, element-wise\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction floor(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.ceil(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the absolute value of the input, element-wise\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction abs(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.abs(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the complex conjugate of the input, element-wise\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction conj(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.conj(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the complex argument of the input, element-wise\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction angle(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.angle(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the absolute value of the input squared, element-wise\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction abs2(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.abs2(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the exponential e^x of the input, element-wise\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction exp_(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.exp_(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the natural (base-e) logarithm of the input, element-wise\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction log_(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.log_(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the base-2 logarithm of the input, element-wise\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction log2_(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.log2_(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the base-10 logarithm of the input, element-wise\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction log10_(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.log10_(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the square root of the input, element-wise\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction sqrt(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.sqrt(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the smallest element between the two arrays, elementwise.\n*\n* Propagates NaNs, preferring the first value if both are NaN.\n* @param {ArrayLike} arr1\n* @param {ArrayLike} arr2\n* @returns {NArray}\n*/\nfunction minimum(arr1, arr2) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.minimum(retptr, addBorrowedObject(arr1), addBorrowedObject(arr2));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the largest element between the two arrays, elementwise.\n*\n* Propagates NaNs, preferring the first value if both are NaN.\n* @param {ArrayLike} arr1\n* @param {ArrayLike} arr2\n* @returns {NArray}\n*/\nfunction maximum(arr1, arr2) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.maximum(retptr, addBorrowedObject(arr1), addBorrowedObject(arr2));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the smallest element between the two arrays, elementwise.\n*\n* Ignores NaNs. If both values are NaN, returns the first one.\n* @param {ArrayLike} arr1\n* @param {ArrayLike} arr2\n* @returns {NArray}\n*/\nfunction nanminimum(arr1, arr2) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.nanminimum(retptr, addBorrowedObject(arr1), addBorrowedObject(arr2));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the largest element between the two arrays, elementwise.\n*\n* Ignores NaNs. If both values are NaN, returns the first one.\n* @param {ArrayLike} arr1\n* @param {ArrayLike} arr2\n* @returns {NArray}\n*/\nfunction nanmaximum(arr1, arr2) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.nanmaximum(retptr, addBorrowedObject(arr1), addBorrowedObject(arr2));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the sine of the input (in radians), element-wise\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction sin_(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.sin_(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the cosine of the input (in radians), element-wise\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction cos_(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.cos_(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the tangent of the input (in radians), element-wise\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction tan_(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.tan_(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the arcsine of the input, element-wise. Returns a value in radians\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction arcsin(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.arcsin(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the arccosine of the input, element-wise. Returns a value in radians\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction arccos(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.arccos(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the arctangent of the input, element-wise. Returns a value in radians\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction arctan(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.arctan(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Return the arctangent of the inputs `y` and `x`, element-wise. Returns a value in radians\n* @param {ArrayLike} y\n* @param {ArrayLike} x\n* @returns {NArray}\n*/\nfunction arctan2(y, x) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.arctan2(retptr, addBorrowedObject(y), addBorrowedObject(x));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {ArrayLike} arr\n* @param {AxesLike | undefined} [axes]\n* @returns {NArray}\n*/\nfunction min(arr, axes) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.min(retptr, addBorrowedObject(arr), isLikeNone(axes) ? 0 : addHeapObject(axes));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {ArrayLike} arr\n* @param {AxesLike | undefined} [axes]\n* @returns {NArray}\n*/\nfunction max(arr, axes) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.max(retptr, addBorrowedObject(arr), isLikeNone(axes) ? 0 : addHeapObject(axes));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {ArrayLike} arr\n* @param {AxesLike | undefined} [axes]\n* @returns {NArray}\n*/\nfunction sum(arr, axes) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.sum(retptr, addBorrowedObject(arr), isLikeNone(axes) ? 0 : addHeapObject(axes));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {ArrayLike} arr\n* @param {AxesLike | undefined} [axes]\n* @returns {NArray}\n*/\nfunction prod(arr, axes) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.prod(retptr, addBorrowedObject(arr), isLikeNone(axes) ? 0 : addHeapObject(axes));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {ArrayLike} arr\n* @param {AxesLike | undefined} [axes]\n* @returns {NArray}\n*/\nfunction mean(arr, axes) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.mean(retptr, addBorrowedObject(arr), isLikeNone(axes) ? 0 : addHeapObject(axes));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {ArrayLike} arr\n* @param {AxesLike | undefined} [axes]\n* @returns {NArray}\n*/\nfunction nanmin(arr, axes) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.nanmin(retptr, addBorrowedObject(arr), isLikeNone(axes) ? 0 : addHeapObject(axes));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {ArrayLike} arr\n* @param {AxesLike | undefined} [axes]\n* @returns {NArray}\n*/\nfunction nanmax(arr, axes) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.nanmax(retptr, addBorrowedObject(arr), isLikeNone(axes) ? 0 : addHeapObject(axes));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {ArrayLike} arr\n* @param {AxesLike | undefined} [axes]\n* @returns {NArray}\n*/\nfunction nansum(arr, axes) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.nansum(retptr, addBorrowedObject(arr), isLikeNone(axes) ? 0 : addHeapObject(axes));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {ArrayLike} arr\n* @param {AxesLike | undefined} [axes]\n* @returns {NArray}\n*/\nfunction nanprod(arr, axes) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.nanprod(retptr, addBorrowedObject(arr), isLikeNone(axes) ? 0 : addHeapObject(axes));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {ArrayLike} arr\n* @param {AxesLike | undefined} [axes]\n* @returns {NArray}\n*/\nfunction nanmean(arr, axes) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.nanmean(retptr, addBorrowedObject(arr), isLikeNone(axes) ? 0 : addHeapObject(axes));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Compute the Fourier transform of the input array\n*\n* Computes the transformation along each of `axes` (defaults to all axes).\n* Uses the normalization `norm`, which can be `'backward'` (default), `'forward'`, or `'ortho'`.\n* @param {ArrayLike} arr\n* @param {AxesLike | undefined} [axes]\n* @param {FFTNorm | undefined} [norm]\n* @returns {NArray}\n*/\nfunction fft(arr, axes, norm) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.fft(retptr, addBorrowedObject(arr), isLikeNone(axes) ? 0 : addHeapObject(axes), isLikeNone(norm) ? 0 : addHeapObject(norm));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Compute the inverse Fourier transform of the input array\n*\n* Computes the transformation along each of `axes` (defaults to all axes).\n* Uses the normalization `norm`, which can be `'backward'` (default), `'forward'`, or `'ortho'`.\n* @param {ArrayLike} arr\n* @param {AxesLike | undefined} [axes]\n* @param {FFTNorm | undefined} [norm]\n* @returns {NArray}\n*/\nfunction ifft(arr, axes, norm) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.ifft(retptr, addBorrowedObject(arr), isLikeNone(axes) ? 0 : addHeapObject(axes), isLikeNone(norm) ? 0 : addHeapObject(norm));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Shifts the zero-frequency component of a Fourier transformed array to the center\n*\n* Shifts along each of `axes` (defaults to all axes).\n* @param {ArrayLike} arr\n* @param {AxesLike | undefined} [axes]\n* @returns {NArray}\n*/\nfunction fftshift(arr, axes) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.fftshift(retptr, addBorrowedObject(arr), isLikeNone(axes) ? 0 : addHeapObject(axes));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Inverse of `fftshift`. Shifts the zero-frequency component of a Fourier transformed array to the corner\n*\n* Shifts along each of `axes` (defaults to all axes).\n* @param {ArrayLike} arr\n* @param {AxesLike | undefined} [axes]\n* @returns {NArray}\n*/\nfunction ifftshift(arr, axes) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.ifftshift(retptr, addBorrowedObject(arr), isLikeNone(axes) ? 0 : addHeapObject(axes));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Compute the Fourier transform of the input array\n*\n* Computes the transformation along the last two axes of the input.\n* Uses the normalization `norm`, which can be `'backward'` (default), `'forward'`, or `'ortho'`.\n* @param {ArrayLike} arr\n* @param {FFTNorm | undefined} [norm]\n* @returns {NArray}\n*/\nfunction fft2(arr, norm) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.fft2(retptr, addBorrowedObject(arr), isLikeNone(norm) ? 0 : addHeapObject(norm));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Compute the inverse Fourier transform of the input array\n*\n* Computes the transformation along the last two axes of the input.\n* Uses the normalization `norm`, which can be `'backward'` (default), `'forward'`, or `'ortho'`.\n* @param {ArrayLike} arr\n* @param {FFTNorm | undefined} [norm]\n* @returns {NArray}\n*/\nfunction ifft2(arr, norm) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.ifft2(retptr, addBorrowedObject(arr), isLikeNone(norm) ? 0 : addHeapObject(norm));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Shifts the zero-frequency component of a Fourier transformed array to the center\n*\n* Computes the transformation along the last two axes of the input.\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction fft2shift(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.fft2shift(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Inverse of `fft2shift`. Shifts the zero-frequency component of a Fourier transformed array to the corner\n*\n* Computes the transformation along the last two axes of the input.\n* @param {ArrayLike} arr\n* @returns {NArray}\n*/\nfunction ifft2shift(arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.ifft2shift(retptr, addBorrowedObject(arr));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {ArrayLike} arr1\n* @param {ArrayLike} arr2\n* @returns {boolean}\n*/\nfunction allequal(arr1, arr2) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.allequal(retptr, addBorrowedObject(arr1), addBorrowedObject(arr2));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {ArrayLike} arr1\n* @param {ArrayLike} arr2\n* @param {number | undefined} [rtol]\n* @param {number | undefined} [atol]\n* @returns {boolean}\n*/\nfunction allclose(arr1, arr2, rtol, atol) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.allclose(retptr, addBorrowedObject(arr1), addBorrowedObject(arr2), !isLikeNone(rtol), isLikeNone(rtol) ? 0 : rtol, !isLikeNone(atol), isLikeNone(atol) ? 0 : atol);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* 1D linear interpolation.\n* Interpolates a set of values `xs` onto the piecewise line defined by `xp` and `yp`.\n*\n* `xp` and `yp` must be 1D arrays. `xp` must be sorted and must not contain NaN values.\n* `left` and `right` define values to return in the case of `xs` outside `xp`. They default to the\n* first and last element of `yp` respectively.\n*\n* Returns an array of the same shape as `xs`.\n* @param {ArrayLike} xs\n* @param {ArrayLike} xp\n* @param {ArrayLike} yp\n* @param {number | undefined} [left]\n* @param {number | undefined} [right]\n* @returns {NArray}\n*/\nfunction interp(xs, xp, yp, left, right) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.interp(retptr, addBorrowedObject(xs), addBorrowedObject(xp), addBorrowedObject(yp), !isLikeNone(left), isLikeNone(left) ? 0 : left, !isLikeNone(right), isLikeNone(right) ? 0 : right);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n        heap[stack_pointer++] = undefined;\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {any} coords\n* @param {ArrayLike} values\n* @param {ArrayLike} xs\n* @param {number | undefined} [fill]\n* @returns {NArray}\n*/\nfunction interpn(coords, values, xs, fill) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.interpn(retptr, addBorrowedObject(coords), addBorrowedObject(values), addBorrowedObject(xs), !isLikeNone(fill), isLikeNone(fill) ? 0 : fill);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n        heap[stack_pointer++] = undefined;\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Create an array from a JSON interchange format, loosely conforming with numpy's __array_interface__ protocol.\n* @param {IArrayInterchange} obj\n* @returns {NArray}\n*/\nfunction from_interchange(obj) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.from_interchange(retptr, addHeapObject(obj));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* Return the constant pi\n* @returns {NArray}\n*/\nfunction pi() {\n    const ret = wasm.pi();\n    return NArray.__wrap(ret);\n}\n\n/**\n* Return the constant tau = 2pi\n* @returns {NArray}\n*/\nfunction tau() {\n    const ret = wasm.tau();\n    return NArray.__wrap(ret);\n}\n\n/**\n* Return a NaN value\n* @returns {NArray}\n*/\nfunction nan() {\n    const ret = wasm.nan();\n    return NArray.__wrap(ret);\n}\n\n/**\n* Return an infinity value\n* @returns {NArray}\n*/\nfunction inf() {\n    const ret = wasm.inf();\n    return NArray.__wrap(ret);\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4, 4) >>> 0;\n    const mem = getDataViewMemory0();\n    for (let i = 0; i < array.length; i++) {\n        mem.setUint32(ptr + 4 * i, addHeapObject(array[i]), true);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n/**\n* @param {(string)[]} strs\n* @param {...any} lits\n* @returns {NArray}\n*/\nfunction expr(strs, ...lits) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArrayJsValueToWasm0(strs, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.expr(retptr, ptr0, len0, addBorrowedObject(lits));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NArray.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n*/\nfunction main() {\n    wasm.main();\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n\nconst DataTypeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_datatype_free(ptr >>> 0, 1));\n/**\n*/\nclass DataType {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DataType.prototype);\n        obj.__wbg_ptr = ptr;\n        DataTypeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DataTypeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_datatype_free(ptr, 0);\n    }\n    /**\n    * @returns {string}\n    */\n    toJSON() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.datatype_toJSON(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.datatype_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    __getTypeId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.datatype___getTypeId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst NArrayFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_narray_free(ptr >>> 0, 1));\n/**\n*/\nclass NArray {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(NArray.prototype);\n        obj.__wbg_ptr = ptr;\n        NArrayFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        NArrayFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_narray_free(ptr, 0);\n    }\n    /**\n    * Return the dtype of the array.\n    * @returns {DataType}\n    */\n    get dtype() {\n        const ret = wasm.narray_dtype(this.__wbg_ptr);\n        return DataType.__wrap(ret);\n    }\n    /**\n    * Return the shape of the array.\n    * @returns {Uint32Array}\n    */\n    get shape() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.narray_shape(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v1 = getArrayU32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the size (total number of elements) of the array\n    * @returns {number}\n    */\n    get size() {\n        const ret = wasm.narray_size(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Return the itemsize, in bytes, of each array element\n    * @returns {number}\n    */\n    get itemsize() {\n        const ret = wasm.narray_itemsize(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {NArray}\n    */\n    clone() {\n        const ret = wasm.narray_clone(this.__wbg_ptr);\n        return NArray.__wrap(ret);\n    }\n    /**\n    * Convert the array to a simple JSON representation.\n    * @returns {object}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.narray_toJSON(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Convert the array to a JSON interchange format, loosely conforming with numpy's __array_interface__ protocol.\n    * @returns {any}\n    */\n    toInterchange() {\n        try {\n            const ptr = this.__destroy_into_raw();\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.narray_toInterchange(retptr, ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Convert the array to a string representation. Useful for debugging.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.narray_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Broadcast the array to shape `shape`. Throws an error if the broadcast is not possible.\n    * @param {ShapeLike} shape\n    * @returns {NArray}\n    */\n    broadcast_to(shape) {\n        try {\n            const ptr = this.__destroy_into_raw();\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.narray_broadcast_to(retptr, ptr, addHeapObject(shape));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NArray.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Apply a colormap to the array, assuming values are normalized between 0 and 1.\n    * @param {string} cmap\n    * @param {ColorLike | undefined} [min_color]\n    * @param {ColorLike | undefined} [max_color]\n    * @param {ColorLike | undefined} [invalid_color]\n    * @returns {Uint8ClampedArray}\n    */\n    apply_cmap(cmap, min_color, max_color, invalid_color) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(cmap, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.narray_apply_cmap(retptr, this.__wbg_ptr, ptr0, len0, isLikeNone(min_color) ? 0 : addHeapObject(min_color), isLikeNone(max_color) ? 0 : addHeapObject(max_color), isLikeNone(invalid_color) ? 0 : addHeapObject(invalid_color));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v2 = getClampedArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the array converted to datatype `dtype`. Throws an error if the conversion is not possible.\n    * @param {DataTypeLike} dtype\n    * @returns {NArray}\n    */\n    astype(dtype) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.narray_astype(retptr, this.__wbg_ptr, addBorrowedObject(dtype));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NArray.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Reshape array into shape `shape`.\n    *\n    * Up to one axis can be specified as '-1', allowing it to be inferred from the length of the array.\n    * @param {AxesLike} shape\n    * @returns {NArray}\n    */\n    reshape(shape) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.narray_reshape(retptr, this.__wbg_ptr, addHeapObject(shape));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NArray.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return a contiguous, flattened array.\n    * @returns {NArray}\n    */\n    ravel() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.narray_flatten(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NArray.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return a contiguous, flattened array.\n    * @returns {NArray}\n    */\n    flatten() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.narray_flatten(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NArray.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {NestedArray<number | boolean>}\n    */\n    toNestedArray() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.narray_toNestedArray(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {...any} idxs\n    * @returns {NArray}\n    */\n    slice(...idxs) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.narray_slice(retptr, this.__wbg_ptr, addBorrowedObject(idxs));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NArray.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    __getTypeId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.narray___getTypeId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst SliceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_slice_free(ptr >>> 0, 1));\n/**\n*/\nclass Slice {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SliceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_slice_free(ptr, 0);\n    }\n    /**\n    * @param {number | undefined} [start]\n    * @param {number | undefined} [end]\n    * @param {number | undefined} [step]\n    */\n    constructor(start, end, step) {\n        const ret = wasm.slice_new(!isLikeNone(start), isLikeNone(start) ? 0 : start, !isLikeNone(end), isLikeNone(end) ? 0 : end, !isLikeNone(step), isLikeNone(step) ? 0 : step);\n        this.__wbg_ptr = ret >>> 0;\n        SliceFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.slice_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    __getTypeId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.slice___getTypeId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nfunction __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nfunction __wbindgen_number_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nfunction __wbindgen_is_function(arg0) {\n    const ret = typeof(getObject(arg0)) === 'function';\n    return ret;\n};\n\nfunction __wbindgen_is_bigint(arg0) {\n    const ret = typeof(getObject(arg0)) === 'bigint';\n    return ret;\n};\n\nfunction __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_as_number(arg0) {\n    const ret = +getObject(arg0);\n    return ret;\n};\n\nfunction __wbindgen_object_clone_ref(arg0) {\n    const ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_narray_new(arg0) {\n    const ret = NArray.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_error_new(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_string_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nfunction __wbindgen_bigint_from_i64(arg0) {\n    const ret = arg0;\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_jsval_eq(arg0, arg1) {\n    const ret = getObject(arg0) === getObject(arg1);\n    return ret;\n};\n\nfunction __wbindgen_bigint_from_u64(arg0) {\n    const ret = BigInt.asUintN(64, arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_is_object(arg0) {\n    const val = getObject(arg0);\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nfunction __wbindgen_is_undefined(arg0) {\n    const ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nfunction __wbindgen_in(arg0, arg1) {\n    const ret = getObject(arg0) in getObject(arg1);\n    return ret;\n};\n\nfunction __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_typeof(arg0) {\n    const ret = typeof getObject(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_is_null(arg0) {\n    const ret = getObject(arg0) === null;\n    return ret;\n};\n\nfunction __wbindgen_ge(arg0, arg1) {\n    const ret = getObject(arg0) >= getObject(arg1);\n    return ret;\n};\n\nfunction __wbindgen_boolean_get(arg0) {\n    const v = getObject(arg0);\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nfunction __wbg_new_abda76e883ba8a5f() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nfunction __wbg_stack_658279fe44541cf6(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nfunction __wbg_error_f851667af71bcfc6(arg0, arg1) {\n    let deferred0_0;\n    let deferred0_1;\n    try {\n        deferred0_0 = arg0;\n        deferred0_1 = arg1;\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n    }\n};\n\nfunction __wbindgen_jsval_loose_eq(arg0, arg1) {\n    const ret = getObject(arg0) == getObject(arg1);\n    return ret;\n};\n\nfunction __wbg_String_b9412f8799faab3e(arg0, arg1) {\n    const ret = String(getObject(arg1));\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nfunction __wbg_getwithrefkey_edc2c8960f0f1191(arg0, arg1) {\n    const ret = getObject(arg0)[getObject(arg1)];\n    return addHeapObject(ret);\n};\n\nfunction __wbg_set_f975102236d3c502(arg0, arg1, arg2) {\n    getObject(arg0)[takeObject(arg1)] = takeObject(arg2);\n};\n\nfunction __wbg_get_bd8e338fbd5f5cc8(arg0, arg1) {\n    const ret = getObject(arg0)[arg1 >>> 0];\n    return addHeapObject(ret);\n};\n\nfunction __wbg_length_cd7af8117672b8b8(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nfunction __wbg_new_16b304a2cfa7ff4a() {\n    const ret = new Array();\n    return addHeapObject(ret);\n};\n\nfunction __wbg_BigInt_42b692c18e1ac6d6(arg0) {\n    const ret = BigInt(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_new_d9bc3a0147634640() {\n    const ret = new Map();\n    return addHeapObject(ret);\n};\n\nfunction __wbg_next_40fc327bfc8770e6(arg0) {\n    const ret = getObject(arg0).next;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_next_196c84450b364254() { return handleError(function (arg0) {\n    const ret = getObject(arg0).next();\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_done_298b57d23c0fc80c(arg0) {\n    const ret = getObject(arg0).done;\n    return ret;\n};\n\nfunction __wbg_value_d93c65011f51a456(arg0) {\n    const ret = getObject(arg0).value;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_iterator_2cee6dadfd956dfa() {\n    const ret = Symbol.iterator;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_get_e3c254076557e348() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(getObject(arg0), getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_call_27c0f87801dedf93() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_new_72fb9a18b5ae2624() {\n    const ret = new Object();\n    return addHeapObject(ret);\n};\n\nfunction __wbg_set_d4638f722068f043(arg0, arg1, arg2) {\n    getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n};\n\nfunction __wbg_isArray_2ab64d95e09ea0ae(arg0) {\n    const ret = Array.isArray(getObject(arg0));\n    return ret;\n};\n\nfunction __wbg_push_a5b05aedc7234f9f(arg0, arg1) {\n    const ret = getObject(arg0).push(getObject(arg1));\n    return ret;\n};\n\nfunction __wbg_instanceof_ArrayBuffer_836825be07d4c9d2(arg0) {\n    let result;\n    try {\n        result = getObject(arg0) instanceof ArrayBuffer;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nfunction __wbg_toString_0b527fce0e8f2bab(arg0, arg1, arg2) {\n    const ret = getObject(arg1).toString(arg2);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nfunction __wbg_set_8417257aaedc936b(arg0, arg1, arg2) {\n    const ret = getObject(arg0).set(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_isSafeInteger_f7b04ef02296c4d2(arg0) {\n    const ret = Number.isSafeInteger(getObject(arg0));\n    return ret;\n};\n\nfunction __wbg_fromEntries_c9d8ec8925e677a8() { return handleError(function (arg0) {\n    const ret = Object.fromEntries(getObject(arg0));\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_buffer_12d079cc21e14bdb(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb(arg0, arg1, arg2) {\n    const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_new_63b92bc8671ed464(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_set_a47bac70306a19a7(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nfunction __wbg_length_c20a40f15020d68a(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nfunction __wbg_instanceof_Uint8Array_2b3bbecd033d19f6(arg0) {\n    let result;\n    try {\n        result = getObject(arg0) instanceof Uint8Array;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nfunction __wbg_apply_0a5aa603881e6d79() { return handleError(function (arg0, arg1, arg2) {\n    const ret = Reflect.apply(getObject(arg0), getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbindgen_bigint_get_as_i64(arg0, arg1) {\n    const v = getObject(arg1);\n    const ret = typeof(v) === 'bigint' ? v : undefined;\n    getDataViewMemory0().setBigInt64(arg0 + 8 * 1, isLikeNone(ret) ? BigInt(0) : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nfunction __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(getObject(arg1));\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nfunction __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nfunction __wbindgen_memory() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/wasm-array/wasm_array_bg.js\n\n}");

/***/ }),

/***/ "./node_modules/wasm-array/wasm_array_bg.wasm":
/*!****************************************************!*\
  !*** ./node_modules/wasm-array/wasm_array_bg.wasm ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

/* harmony import */ var WEBPACK_IMPORTED_MODULE_0 = __webpack_require__(/*! ./wasm_array_bg.js */ "./node_modules/wasm-array/wasm_array_bg.js");
module.exports = __webpack_require__.v(exports, module.id, "9573273f862f4f5d9644", {
	"./wasm_array_bg.js": {
		"__wbindgen_object_drop_ref": WEBPACK_IMPORTED_MODULE_0.__wbindgen_object_drop_ref,
		"__wbindgen_number_get": WEBPACK_IMPORTED_MODULE_0.__wbindgen_number_get,
		"__wbindgen_is_function": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_function,
		"__wbindgen_is_bigint": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_bigint,
		"__wbindgen_number_new": WEBPACK_IMPORTED_MODULE_0.__wbindgen_number_new,
		"__wbindgen_as_number": WEBPACK_IMPORTED_MODULE_0.__wbindgen_as_number,
		"__wbindgen_object_clone_ref": WEBPACK_IMPORTED_MODULE_0.__wbindgen_object_clone_ref,
		"__wbg_narray_new": WEBPACK_IMPORTED_MODULE_0.__wbg_narray_new,
		"__wbindgen_error_new": WEBPACK_IMPORTED_MODULE_0.__wbindgen_error_new,
		"__wbindgen_string_get": WEBPACK_IMPORTED_MODULE_0.__wbindgen_string_get,
		"__wbindgen_bigint_from_i64": WEBPACK_IMPORTED_MODULE_0.__wbindgen_bigint_from_i64,
		"__wbindgen_jsval_eq": WEBPACK_IMPORTED_MODULE_0.__wbindgen_jsval_eq,
		"__wbindgen_bigint_from_u64": WEBPACK_IMPORTED_MODULE_0.__wbindgen_bigint_from_u64,
		"__wbindgen_is_object": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_object,
		"__wbindgen_is_undefined": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_undefined,
		"__wbindgen_in": WEBPACK_IMPORTED_MODULE_0.__wbindgen_in,
		"__wbindgen_string_new": WEBPACK_IMPORTED_MODULE_0.__wbindgen_string_new,
		"__wbindgen_typeof": WEBPACK_IMPORTED_MODULE_0.__wbindgen_typeof,
		"__wbindgen_is_null": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_null,
		"__wbindgen_ge": WEBPACK_IMPORTED_MODULE_0.__wbindgen_ge,
		"__wbindgen_boolean_get": WEBPACK_IMPORTED_MODULE_0.__wbindgen_boolean_get,
		"__wbg_new_abda76e883ba8a5f": WEBPACK_IMPORTED_MODULE_0.__wbg_new_abda76e883ba8a5f,
		"__wbg_stack_658279fe44541cf6": WEBPACK_IMPORTED_MODULE_0.__wbg_stack_658279fe44541cf6,
		"__wbg_error_f851667af71bcfc6": WEBPACK_IMPORTED_MODULE_0.__wbg_error_f851667af71bcfc6,
		"__wbindgen_jsval_loose_eq": WEBPACK_IMPORTED_MODULE_0.__wbindgen_jsval_loose_eq,
		"__wbg_String_b9412f8799faab3e": WEBPACK_IMPORTED_MODULE_0.__wbg_String_b9412f8799faab3e,
		"__wbg_getwithrefkey_edc2c8960f0f1191": WEBPACK_IMPORTED_MODULE_0.__wbg_getwithrefkey_edc2c8960f0f1191,
		"__wbg_set_f975102236d3c502": WEBPACK_IMPORTED_MODULE_0.__wbg_set_f975102236d3c502,
		"__wbg_get_bd8e338fbd5f5cc8": WEBPACK_IMPORTED_MODULE_0.__wbg_get_bd8e338fbd5f5cc8,
		"__wbg_length_cd7af8117672b8b8": WEBPACK_IMPORTED_MODULE_0.__wbg_length_cd7af8117672b8b8,
		"__wbg_new_16b304a2cfa7ff4a": WEBPACK_IMPORTED_MODULE_0.__wbg_new_16b304a2cfa7ff4a,
		"__wbg_BigInt_42b692c18e1ac6d6": WEBPACK_IMPORTED_MODULE_0.__wbg_BigInt_42b692c18e1ac6d6,
		"__wbg_new_d9bc3a0147634640": WEBPACK_IMPORTED_MODULE_0.__wbg_new_d9bc3a0147634640,
		"__wbg_next_40fc327bfc8770e6": WEBPACK_IMPORTED_MODULE_0.__wbg_next_40fc327bfc8770e6,
		"__wbg_next_196c84450b364254": WEBPACK_IMPORTED_MODULE_0.__wbg_next_196c84450b364254,
		"__wbg_done_298b57d23c0fc80c": WEBPACK_IMPORTED_MODULE_0.__wbg_done_298b57d23c0fc80c,
		"__wbg_value_d93c65011f51a456": WEBPACK_IMPORTED_MODULE_0.__wbg_value_d93c65011f51a456,
		"__wbg_iterator_2cee6dadfd956dfa": WEBPACK_IMPORTED_MODULE_0.__wbg_iterator_2cee6dadfd956dfa,
		"__wbg_get_e3c254076557e348": WEBPACK_IMPORTED_MODULE_0.__wbg_get_e3c254076557e348,
		"__wbg_call_27c0f87801dedf93": WEBPACK_IMPORTED_MODULE_0.__wbg_call_27c0f87801dedf93,
		"__wbg_new_72fb9a18b5ae2624": WEBPACK_IMPORTED_MODULE_0.__wbg_new_72fb9a18b5ae2624,
		"__wbg_set_d4638f722068f043": WEBPACK_IMPORTED_MODULE_0.__wbg_set_d4638f722068f043,
		"__wbg_isArray_2ab64d95e09ea0ae": WEBPACK_IMPORTED_MODULE_0.__wbg_isArray_2ab64d95e09ea0ae,
		"__wbg_push_a5b05aedc7234f9f": WEBPACK_IMPORTED_MODULE_0.__wbg_push_a5b05aedc7234f9f,
		"__wbg_instanceof_ArrayBuffer_836825be07d4c9d2": WEBPACK_IMPORTED_MODULE_0.__wbg_instanceof_ArrayBuffer_836825be07d4c9d2,
		"__wbg_toString_0b527fce0e8f2bab": WEBPACK_IMPORTED_MODULE_0.__wbg_toString_0b527fce0e8f2bab,
		"__wbg_set_8417257aaedc936b": WEBPACK_IMPORTED_MODULE_0.__wbg_set_8417257aaedc936b,
		"__wbg_isSafeInteger_f7b04ef02296c4d2": WEBPACK_IMPORTED_MODULE_0.__wbg_isSafeInteger_f7b04ef02296c4d2,
		"__wbg_fromEntries_c9d8ec8925e677a8": WEBPACK_IMPORTED_MODULE_0.__wbg_fromEntries_c9d8ec8925e677a8,
		"__wbg_buffer_12d079cc21e14bdb": WEBPACK_IMPORTED_MODULE_0.__wbg_buffer_12d079cc21e14bdb,
		"__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb": WEBPACK_IMPORTED_MODULE_0.__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb,
		"__wbg_new_63b92bc8671ed464": WEBPACK_IMPORTED_MODULE_0.__wbg_new_63b92bc8671ed464,
		"__wbg_set_a47bac70306a19a7": WEBPACK_IMPORTED_MODULE_0.__wbg_set_a47bac70306a19a7,
		"__wbg_length_c20a40f15020d68a": WEBPACK_IMPORTED_MODULE_0.__wbg_length_c20a40f15020d68a,
		"__wbg_instanceof_Uint8Array_2b3bbecd033d19f6": WEBPACK_IMPORTED_MODULE_0.__wbg_instanceof_Uint8Array_2b3bbecd033d19f6,
		"__wbg_apply_0a5aa603881e6d79": WEBPACK_IMPORTED_MODULE_0.__wbg_apply_0a5aa603881e6d79,
		"__wbindgen_bigint_get_as_i64": WEBPACK_IMPORTED_MODULE_0.__wbindgen_bigint_get_as_i64,
		"__wbindgen_debug_string": WEBPACK_IMPORTED_MODULE_0.__wbindgen_debug_string,
		"__wbindgen_throw": WEBPACK_IMPORTED_MODULE_0.__wbindgen_throw,
		"__wbindgen_memory": WEBPACK_IMPORTED_MODULE_0.__wbindgen_memory
	}
});

/***/ })

}]);